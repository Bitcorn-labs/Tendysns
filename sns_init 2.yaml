name: Tendy DAO

description: >
    Tendy DAO is an innovative, community-driven organization on the Internet Computer Protocol, dedicated to protecting and evolving the Tendy brand. Serving as a dynamic, open platform, it empowers members to collaborate, create, and shape the future of Tendy through collective governance and decentralized innovation.

# This is currently a placeholder field and must be left empty for now.
Principals: []

# Token logo
logo: logo.png

# URL to the dapp controlled by the SNS project.
url: (tendy url)

# Metadata for the NNS proposal required to create the SNS. This data will be
# shown only in the NNS proposal.
NnsProposal:
    # The title of the NNS proposal.
    title: "NNS Proposal to create an SNS DAO named 'Tendy DAO'"

    # The HTTPS address of additional content required to evaluate the NNS
    # proposal.
    url: "(link to forum)"

    # The description of the proposal. 
summary: |
    **I. Vision and Purpose**

    The core vision of Tendy DAO is to protect, evolve, and decentralize the Tendy brand through a community-first, open-source SNS DAO on the Internet Computer Protocol. Inspired by the pioneering SNS-1 model, Tendy DAO serves as an inclusive framework where developers, creators, and community members worldwide can propose, build, and contribute to the growth of Tendy.

    Whether it’s advancing tech tools, launching brand-aligned projects, or expanding community culture, all proposals follow our guiding principle: *for the culture, by the culture*.

    For full details, please refer to our SNS proposal on the DFINITY forums (link above).

    *dApp:*

    The Tendy Converter dApp allows holders of the legacy TENDY token (currently in circulation) to convert them 1:1 (minus transaction fees) to the new Tendy DAO token created for the SNS.

    **II. Token Distribution**

    *Token Details:*

    * Token name: Tendy DAO
    * Token symbol: TENDY
    * Total token supply: 8,888 TENDY
    * Initial distribution: 85% treasury, 10% decentralization sale, 5% Tendy founding team
    * SNS ledger transaction fee: 0.00001 TENDY
    * Tendy dApp canister: (canister-id-here)

    **Note on Actual Token Allocation:**

    Due to the 1:1 conversion of the legacy TENDY token into the new Tendy DAO token, the actual post-launch allocation will adjust as follows:

    * 19.5% treasury  
    * 10% decentralization sale  
    * 10% Tendy founding team  
    * 60.1% Tendy converter dApp  
    * ~0.4% burned  

    Most of the treasury’s TENDY will be allocated to the converter dApp to support conversions. The founding team will convert 444 of their old TENDY tokens and burn 444, ending up with 888 new TENDY DAO tokens (10% of supply). Of these, 444 will be locked in a neuron (8-month vesting, 1-month dissolve delay); the remaining 444 will be unlocked.

    **III. Governance and Token Management**

    After the decentralization sale, the Tendy DAO team will propose actions to:

    * Burn a matching number of NEW TENDY DAO tokens equivalent to burned legacy TENDY (~35 tokens)
    * Burn unclaimed legacy TENDY tokens held in the treasury and sale reserve (e.g., 1,733 in treasury, 888 reserved for sale)
    * Burn 444 legacy TENDY tokens from the founding team
    * Transfer approximately 5,337 NEW TENDY DAO tokens to the converter dApp, leaving 1,733 in the treasury to match original reserve

    This ensures a clean 1:1 conversion and matches the circulating supply from old to new tokens. Roughly 3,065 legacy tokens will be burned in total, with ~5,337 remaining to be converted.

    *Governance Parameters:*

    * Minimum stake: 0.01 TENDY
    * Minimum dissolve delay for voting: 1 month
    * Maximum dissolve delay for bonus: 6 months
    * Voting rewards: 0%
    * Max dissolve delay voting power bonus: 100%
    * Max age for voting power bonus: 1 year
    * Max age bonus: 25%

    **IV. Decentralization Sale**

    * Minimum participants: 10
    * Minimum participation: 1 ICP
    * Maximum participation: 3,000 ICP
    * Min to be raised: 100 ICP
    * Max to be raised: 30,000 ICP
    * Community Fund Participation: 0 ICP
    * Sale duration: 7 days
    * Sale delay: 0 days
    * Number of neurons: 2
    * Dissolve delay of neurons: 0 and 30 days
    * Restricted_countries:
      US, KP, CU, SD, SY, IR, VE

fallback_controller_principals:
    # principal of the intended fallback controller
    [d7zib-qo5mr-qzmpb-dtyof-l7yiu-pu52k-wk7ng-cbm3n-ffmys-crbkz-nae] #NNS -> my canister

# The list of dapp canister(s) that will be decentralized if the
# decentralization swap succeeds. These are defined in the form of canister IDs,
# for example, `bnz7o-iuaaa-aaaaa-qaaaa-cai`.  For a successful SNS launch,
# these dapp canister(s) must be co-controlled by the NNS Root canister
# (`r7inp-6aaaa-aaaaa-aaabq-cai`) at latest at the time when the NNS proposal to
# create an SNS is adopted (usually this is required even earlier, e.g., to
# convince NNS neurons to vote in favor of your proposal).
dapp_canisters:
    # canister ID of the to-be-decentralized dapp
    [5ceyv-syaaa-aaaag-qc43q-cai]

# Configuration of SNS tokens in the SNS Ledger canister deployed as part
# of the SNS.
Token:
    # The name of the token issued by the SNS ledger.
    name: Tendy DAO

    # The symbol of the token issued by the SNS Ledger.
    symbol: TENDY

    # SNS ledger transaction fee.
    transaction_fee: 1000 e8s

    # Path to the SNS token logo 
    logo: logo.png

# Configures SNS proposal-related fields. These fields define the initial values
# for some of the nervous system parameters related to SNS proposals. This will
# not affect all SNS proposals submitted to the newly created SNS.
Proposals:
    # The cost of making an SNS proposal that is rejected by the SNS neuron
    # holders. This field is specified as a token. For example: "1 token".
    rejection_fee: 0.1 token

    # The initial voting period of an SNS proposal. A proposal's voting period
    # may be increased during its lifecycle due to the wait-for-quiet algorithm
    # (see details below). This field is specified as a duration. For example
    # "4 days".
    initial_voting_period: 4 days

    # The wait-for-quiet algorithm extends the voting period of a proposal when
    # there is a flip in the majority vote during the proposal's voting period.
    maximum_wait_for_quiet_deadline_extension: 1 day

# Configuration of SNS voting.
Neurons:
    # The minimum amount of SNS tokens to stake a neuron. This field is specified
    # as a token. For instance, "1 token".
    minimum_creation_stake: 0.01 tokens

# Configuration of SNS voting.
Voting:
    # The minimum dissolve delay a neuron must have to be able to cast votes on
    # proposals.
    #
    # Dissolve delay incentivizes neurons to vote in the long-term interest of
    # an SNS, as they are rewarded for longer-term commitment to that SNS.
    #
    # Users cannot access the SNS tokens used to stake neurons (until the neuron
    # is dissolved). This field is specified as a duration. For example: "6 months".
    minimum_dissolve_delay: 1 month

    # Configuration of voting power bonuses that are applied to neurons to
    # incentivize alignment with the best interest of the DAO. Note, these
    # bonuses multiply each other, so the increase in voting power due to
    # the dissolve delay bonus is used in the equation to increase voting
    # power for the age bonus.
    MaximumVotingPowerBonuses:
        # Users with a higher dissolve delay are incentivized to take the
        # long-term interests of the SNS into consideration when voting. To
        # reward this long-term commitment, this bonus can be set to a
        # percentage greater than zero, which will result in neurons having
        # their voting power increased in proportion to their dissolve delay.
        #
        # For example, if the user has a dissolve delay of 6 months, and
        # the maximum dissolve delay duration (defined below as `duration`)
        # for the dissolve delay bonus is 12 months, and the maximum bonus
        # (defined as `bonus` below) is set to 10%, then that user’s voting
        # power will be 105% of their normal voting power based on staked
        # tokens (i.e. they will have a bonus of 5%). If the user increased
        # their dissolve delay to 9 months, they would get 107.5% of the normal
        # voting power of their tokens. And if they increased to 12 months, they
        # would get 110%. If they increase further, they get no additional bonus.
        #
        # If you do not want this bonus to be applied for neurons with higher
        # dissolve delay, set `bonus` to `0%` and those neurons will not receive
        # higher voting power.
        DissolveDelay:
            # This parameter sets the maximum dissolve delay a neuron can have.
            # When reached, the maximum dissolve delay bonus will be applied.
            # This field is specified as a duration. For example: "8 years".
            duration: 6 months
            # If a neuron's dissolve delay is `duration`, its voting power will
            # be increased by the dissolve delay `bonus` amount. 
            # This field is specified as a percentage. For instance, 
            # a value of "100%" means that the voting power will be doubled
            # (multiplied by 2).
            bonus: 100%

        # Users with neurons staked in the non-dissolving state for a long
        # period of time are incentivized to take the long-term interests of
        # the SNS into consideration when voting. To reward this long-term
        # commitment, this bonus can be set to a percentage (greater than zero),
        # which will result in neurons having their voting power increased in
        # proportion to their age.
        #
        # For example, if the neuron has an age of 6 months, and the maximum age
        # duration (defined below as `duration`) for the age bonus is 12 months,
        # and the maximum bonus (defined as `bonus` below) is set to 10%, then
        # that neuron’s voting power will be 105% of their normal voting power
        # based on staked tokens plus dissolve delay bonus (i.e. they will have a
        # bonus of 5%). If neuron aged another 3 months to have an age of 9 months,
        # the neuron would get 107.5% of the normal voting power. And if the neuron
        # aged another 3 months to 12 months, the neuron would get 110%. If the neuron
        # ages further, it get no additional bonus.
        #
        # If this bonus should not be applied for older neurons, set the bonus
        # to `0%` and older neurons will not receive higher voting power.
        Age:
            # This parameter sets the duration of time the neuron must be staked
            # in the non-dissolving state, in other words its `age`, to reach
            # the maximum age bonus. Once this age is reached, the neuron will
            # continue to age, but no more bonus will be applied. This field
            # is specified as a duration. For example: "2 years".
            duration: 1 year
            # If a neuron's age is `duration` or older, its voting power will be
            # increased by this age`bonus` amount. 
            # This field is specified as a percentage. For instance, 
            # a value of "25%" means that the voting power will increase by a quarter
            # (multiplied by 1.25).
            bonus: 25%

    # Configuration of SNS voting reward parameters.
    #
    # The voting reward rate controls how quickly the supply of the SNS token
    # increases. For example, setting `initial` to `2%` will cause the supply to
    # increase by at most `2%` per year. A higher voting reward rate
    # incentivizes users to participate in governance, but also results in
    # higher inflation.
    #
    # The initial and final reward rates can be set to have a higher reward rate
    # at the launch of the SNS and a lower rate further into the SNS’s lifetime.
    # The reward rate falls quadratically from the `initial` rate to the `final`
    # rate over the course of `transition_duration`.
    #
    # Setting both `initial` and `final` to `0%` will result in the system not
    # distributing voting rewards at all.
    #
    # More details on SNS tokenomics can be found in the developer documentation:
    # https://internetcomputer.org/docs/current/developer-docs/integrations/sns/tokenomics/rewards/#voting-rewards
    RewardRate:
        # The initial reward rate at which the SNS voting rewards will increase
        # per year. This field is specified as a percentage. For example: "15%".
        initial: 0%

        # The final reward rate at which the SNS voting rewards will increase
        # per year. This rate is reached after `transition_duration` and remains
        # at this level unless changed by an SNS proposal. This field is
        # specified as a percentage. For example: "5%".
        final: 0%

        # The voting reward rate falls quadratically from `initial` to `final`
        # over the time period defined by `transition_duration`.
        #
        # Values of 0 result in the reward rate always being `final`.
        #
        # This field is specified as a duration. For example: "8 years".
        transition_duration: 0 years

# Configuration of the initial token distribution of the SNS. You can configure
# how SNS tokens are distributed in each of the three groups:
# (1) tokens that are given to the original developers of the dapp,
# (2) treasury tokens that are owned by the SNS governance canister, and
# (3) tokens which are distributed to the decentralization swap participants.
#
# The initial token distribution must satisfy the following preconditions to be
# valid:
#    - The sum of all developer tokens in E8s must be less than `u64::MAX`.
#    - The Swap's initial balance (see group (3) above) must be greater than 0.
#    - The Swap's initial balance (see group (3) above) must be greater than or
#      equal to the sum of all developer tokens.
Distribution:
    # The initial neurons created when the SNS Governance canister is installed.
    # Each element in this list specifies one such neuron, including its stake,
    # controlling principal, memo identifying this neuron (every neuron that
    # a user has must be identified by a unique memo), dissolve delay, and a
    # vesting period. Even though these neurons are distributed at genesis,
    # they are locked in a (restricted) pre-initialization mode until the
    # decentralization swap is completed. Note that `vesting_period` starts
    # right after the SNS creation and thus includes the pre-initialization mode
    # period.
    #
    # For example:
    #  - principal: hpikg-6exdt-jn33w-ndty3-fc7jc-tl2lr-buih3-cs3y7-tftkp-sfp62-gqe
    #    stake: 1_000 tokens
    #    memo: 0
    #    dissolve_delay: 2 years
    #    vesting_period: 4 years
    Neurons:
        # For the actual SNS launch, you should replace this with one or more
        # principals of your intended genesis neurons.
        #
        # For testing, propose_sns.sh will fill this in automatically.
        - principal: umo43-o3yqa-363iw-wroso-jm5az-kmfp2-rdzoj-q7il2-zfhcj-l35r7-oqe #NNS -> my canister
          stake: 500 tokens
          memo: 0
          dissolve_delay: 1 months
          vesting_period: 8 months
    # The initial SNS token balances of the various canisters of the SNS.
    InitialBalances:
        # The initial SNS token balance of the SNS Governance canister is known
        # as the treasury. This is initialized in a special sub-account, as the
        # main account of Governance is the minting account of the SNS Ledger.
        # This field is specified as a token. For instance, "1 token".
        governance: 4_500 tokens

        # The initial SNS token balance of the Swap canister is what will be
        # available for the decentralization swap. These tokens will be swapped
        # for ICP. This field is specified as a token. For instance, "1 token".
        swap: 1_000 tokens

    # Checksum of the total number of tokens distributed in this section.
    # This field is specified as a token. For instance, "1 token".
    #          1_000    (neuron)
    #      2 million    (governance)
    # + 500 thousand    (swap)
    # --------------
    total: 10_000 tokens

# Configuration of the decentralization swap parameters. Choose these parameters
# carefully, if a decentralization swap fails, the SNS will restore the dapp
# canister(s) to the fallback controllers (defined in
# `fallback_controller_principals`) and you will need to start over.
Swap:
    # The minimum number of direct participants that must participate for the
    # decentralization swap to succeed. If a decentralization swap finishes due
    # to the deadline or the maximum target being reached, and if there are less
    # than `minimum_participants` (here, only direct participants are counted),
    # the swap will be committed.
    minimum_participants: 10

    # Minimum amount of ICP from direct participants. This amount is required for
    # the swap to succeed. If this amount is not achieved, the swap will be
    # aborted (instead of committed) when the due date/time occurs.
    # Must be smaller than or equal than `maximum_direct_participation_icp`.
    minimum_direct_participation_icp: 100 tokens

    # Maximum amount of ICP from direct participants. If this amount is achieved,
    # the swap will finalize immediately, without waiting for the due date/time;
    # in this case, the swap would be committed if and only if the number of
    # direct participants (`minimum_participants`) is reached (otherwise, it
    # would be aborted).
    # Must be at least `min_participants * minimum_direct_participation_icp`.
    maximum_direct_participation_icp: 100_000 tokens

    # The minimum amount of ICP that each participant must contribute
    # to participate. This field is specified as a token. For instance,
    # "1 token".
    minimum_participant_icp: 1 tokens

    # The maximum amount of ICP that each participant may contribute
    # to participate. This field is specified as a token. For instance,
    # "1 token".
    maximum_participant_icp: 3_000 tokens

    # The text that swap participants must confirm before they may participate
    # in the swap.
    #
    # This field is optional. If set, must be within 1 to 1,000 characters and
    # at most 8,000 bytes.
    # confirmation_text: >
    #     I confirm my understanding of the responsibilities and risks
    #     associated with participating in this token swap.

    # A list of countries from which swap participation should not be allowed.
    #
    # This field is optional. By default, participants from all countries
    # are allowed.
    #
    # Each list element must be an ISO 3166-1 alpha-2 country code.
    restricted_countries:
      - US
      - KP
      - CU
      - SD
      - SY
      - IR
      - VE


    # Configuration of the vesting schedule of the neuron basket, i.e., the SNS
    # neurons that a participants will receive from a successful
    # decentralization swap.
    VestingSchedule:
        # The number of events in the vesting schedule. This translates to how
        # many neurons will be in each participant's neuron basket. Note that
        # the first neuron in each neuron basket will have zero dissolve delay.
        # This value should thus be greater than or equal to `2`.
        events: 2

        # The interval at which the schedule will be increased per event. The
        # first neuron in the basket will be unlocked with zero dissolve delay.
        # Each other neuron in the schedule will have its dissolve delay
        # increased by `interval` compared to the previous one. For example,
        # if `events` is set to `3` and `interval` is `1 month`, then each
        # participant's neuron basket will have three neurons (with equal stake)
        # with dissolve delays zero, 1 month, and 2 months. Note that the notion
        # of `Distribution.neurons.vesting_period` applies only to developer
        # neurons. While neuron basket neurons do not use `vesting_period`, they
        # have a vesting schedule. This field is specified as a duration. For
        # example: "1 month".
        interval: 1 month

    # Absolute time of day when the decentralization swap is supposed to start.
    #
    # An algorithm will be applied to allow at least 24 hours between the time
    # of execution of the CreateServiceNervousSystem proposal and swap start.
    # For example, if start_time is 23:30 UTC and the proposal is adopted and
    # executed at 23:20 UTC, then the swap start will be at 23:30 UTC the next
    # day (i.e., in 24 hours and 10 min from the proposal execution time).
    #
    # WARNING: Swap start_time works differently on mainnet and in testing.
    #
    # On mainnet:
    # - Setting start_time to some value (e.g., 23:30 UTC) will allow the swap
    #   participants to be prepared for the swap in advance, e.g.,
    #   by obtaining ICPs that they would like to participate with.
    # - If start_time is not specified, the actual start time of the swap will
    #   be chosen at random (allowing at least 24 hours and less than 48 hours,
    #   as described above).
    #
    # In testing:
    # - Setting start_time to some value works the same as explained above.
    # - If start_time is not specified, the swap will begin immediately after
    #   the CreateServiceNervousSystem proposal is executed. This facilitates
    #   testing in an accelerated manner.
    #
    # start_time: 23:30 UTC  # Intentionally commented out for testing.

    # The duration of the decentralization swap. When `start_time` is calculated
    # during CreateServiceNervousSystem proposal execution, this `duration` will
    # be added to that absolute time and set as the swap's deadline.
    duration: 7 days

    # Whether Neurons' Fund participation is requested.
    neurons_fund_participation: false